generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  name                    String?
  username                String?                  @unique
  email                   String?                  @unique
  avatarUrl               String?
  role                    Role?                    @default(USER)
  createdAt               DateTime                 @default(now())
  telephone               String?
  passwordHash            String?
  googleId                String?                  @unique
  bio                     String?
  isWelcomed              Boolean                  @default(false)
  isVerified              Boolean                  @default(false)
  emailVerified           Boolean                  @default(false)
  emailVerificationTokens EmailVerificationToken[]
  employees               Employee[]
  newsComments            NewsComment[]
  newsArticleLikes        NewsArticleLike[]
  newsArticles            NewsArticle[]
  newsLetters             NewsLetter[]
  sessions                Session[]

  @@map("users")
}

model Entity {
  id                    String  @id @default(uuid())
  webName               String
  about                 String?
  historyAndCulture     String?
  geographicalLandmarks String?
}

model DepartMent {
  id                  String               @id @default(uuid())
  name                String
  headOfDepartmentId  String?
  about               String?
  departmentalSectors DepartMentalSector[]
  headOfDepartment    Employee?            @relation(fields: [headOfDepartmentId], references: [id])

  @@map("departments")
}

model DepartMentalSector {
  id           String      @id @default(uuid())
  name         String
  description  String?
  departMentId String?
  hierarchy    Int
  departMent   DepartMent? @relation(fields: [departMentId], references: [id])
  employees    Employee[]

  @@map("departmental_sectors")
}

model Employee {
  id                   String              @id @default(uuid())
  assumedOffice        Int
  endedOffice          Int?
  position             String
  shortMessageToPublic String?
  departMentalSectorId String?
  userId               String
  hierarchy            Int
  ippsNumber           String              @unique
  title                String
  departMents          DepartMent[]
  departMentalSector   DepartMentalSector? @relation(fields: [departMentalSectorId], references: [id])
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employees")
}

model EmailVerificationToken {
  id      String @id @default(uuid())
  userId  String
  expires BigInt
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  role      Role     @default(USER)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model NewsLetterSubscription {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())

  @@map("news_letter_subscriptions")
}

model NewsLetter {
  id          String   @id @default(uuid())
  title       String
  content     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("news_letters")
}

model NewsArticle {
  id               String            @id @default(uuid())
  imageUrl         String?
  title            String
  publishedAt      DateTime          @default(now())
  content          String
  authorId         String
  location         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  newsComments     NewsComment[]
  newsArticleLikes NewsArticleLike[]
  author           User              @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("news_articles")
}

model NewsComment {
  id            String      @id @default(uuid())
  content       String
  commenterId   String
  newsArticleId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  commenter     User        @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  newsArticle   NewsArticle @relation(fields: [newsArticleId], references: [id], onDelete: Cascade)

  @@map("news_article_comments")
}

model NewsArticleLike {
  id            String      @id @default(uuid())
  likerId       String
  newsArticleId String
  createdAt     DateTime    @default(now())
  liker         User        @relation(fields: [likerId], references: [id], onDelete: Cascade)
  newsArticle   NewsArticle @relation(fields: [newsArticleId], references: [id], onDelete: Cascade)

  @@map("news_article_likes")
}

enum Role {
  USER
  ADMIN
  MODERATOR
  STAFF
}
